# PHPUnit - Unit Testing Tool

https://phpunit.de/documentation.html

--------------------------------------------------------------
PHPUnit Version	  |   PHP Version   |   End Of Life?
--------------------------------------------------------------
V11               |   8.2           |
V10		            |   8.1+          |
V9		            |   7.3+          |
V8		            |   7.2+          |
V7		            |   7.1 - 7.3     |   Feb 7 2020
V6		            |   7.0 - 7.2     |   Feb 1 2019
V5		            |   5.6 - 7.1     |   Feb 2 2018
V4		            |   5.3 - 5.6     |   Feb 3 2017
--------------------------------------------------------------
Source: https://phpunit.de/supported-versions.html

----

# Notes on installing PHPUnit

PHPUnit should be installed in a container that doesn't run a web server.  Tests should be executed against the code and there is no need for it.
I will create a Docker image to do my PHPUnit testing based on the latest Alpine Docker image.


## Why?

Alpine is a very small operating system and its images have a very small footprint.  This image will end up being less than 60MB with all the packages and dependencies installed.


### Steps to build the agent manually:


To create a Dockerfile for setting up `php:8.1.19` and `phpunit 10.1.0` using the base Alpine image, you can follow these steps:

  1. Create a new directory and navigate into it:

  ```
  mkdir Jenkins-PHP-Agents
  cd Jenkins-PHP-Agents
  ```

  2. Create a file named `Dockerfile-PHPUnit-10.1.0-PHP-8.1` using Visual Studio Code.  Make sure the file is using LF and not CRLF as its line sequence.

  3. Open the Dockerfile and add the following content:

  ```
  # Use the latest alpine image
  FROM alpine:latest

  LABEL mantainer="Jorge Pabón <pianistapr@hotmail.com>" description="A Jenkins agent to run tests using PHPUnit."

  # Start on the /tmp folder
  WORKDIR /tmp

  ###################################################################################################################
  # When installing packages from APK
  # Do not use GIT! It will include a lot of unnecessary stuff from the repos that will make your image gigantic ~3GB
  ###################################################################################################################
  RUN apk --no-cache add \
          ca-certificates \
          # We need composer to set up PHPUnit
          composer \
          # Will be using PHP 8.1
          php81 \
          # Add dependencies for PHP 8.1
          php81-bcmath \
          php81-ctype \
          php81-curl \
          php81-dom \
          php81-exif \
          php81-fileinfo \
          php81-json \
          php81-mbstring \
          php81-mysqli \
          php81-opcache \
          php81-openssl \
          php81-pcntl \
          php81-pdo \
          php81-pdo_dblib \
          php81-pdo_mysql \
          php81-pdo_odbc \
          php81-pdo_pgsql \
          php81-pdo_sqlite \
          php81-pecl-memcache \
          php81-phar \
          php81-session \
          php81-simplexml \
          php81-soap \
          php81-tokenizer \
          php81-xdebug \
          php81-xml \
          php81-xmlreader \
          php81-xmlwriter \
          php81-zip \
          php81-zlib \
      # We also use PEAR
      && php -r "copy('https://pear.php.net/go-pear.phar', 'go-pear.phar');" \
      && php go-pear.phar \
      && php -r "unlink('go-pear.phar');"
      
      # Install PHPUnit 10.1.0 using composer
      RUN composer require "phpunit/phpunit:10.1.0" --prefer-source --no-interaction \
      && composer require "phpunit/php-invoker" --prefer-source --no-interaction \
      # Install into /usr/local/bin/phpunit
      && ln -s /tmp/vendor/bin/phpunit /usr/local/bin/phpunit \
      # Add name to PHPUnit providers
      && sed -i 's/nn and/nn, Jorge Pabón, and/g' /tmp/vendor/phpunit/phpunit/src/Runner/Version.php \
      # If you can't find the xdebug.ini file, list everything related to PHP and look at the logs
      #&& ls -R /etc/php* \
      # Enable X-Debug
      && sed -i 's/\;z/z/g' /etc/php81/conf.d/50_xdebug.ini \
      && php -m | grep -i xdebug

  # Switch to the /App directory
  WORKDIR /App

  # Start the container with PHPUnit
  ENTRYPOINT ["/bin/sh"]
  ```

  4. Save and close the Dockerfile.

  This Dockerfile starts with the official `alpine:latest` image as the base image.  It then installs the necessary packages like Composer, PHP, PEAR, and any dependencies for these.
  After that, it downloads PHPUnit using composer, then liknks it to the `/usr/local/bin/` directory to make it globally available.

  The working directory is set to '/App'. Finally, the container is configured to run the linux shell `/bin/sh` when it starts.

  5. To build the Docker image, run the following command from the directory containing the Dockerfile in your PC:

  For x64:

  ```
  docker buildx build --push --platform=linux/amd64 -t prengineer/jenkins-php-agent:8.1 -f Dockerfile .
  ```

  For ARM64:

  ```
  docker buildx build --push --platform=linux/arm64 -t prengineer/jenkins-php-agent:8.1 -f Dockerfile .
  ```

  For multi-architecture (you need the Containerd Image Store enabled in Docker Desktop):

  ```
  docker buildx build --push --platform=linux/arm64,linux/amd64 -t prengineer/jenkins-php-agent:8.1 -f Dockerfile .
  ```

  6. After the image is built, you can run a container based on this image using the following command:

  ```
  docker run -it --rm --name jenkins-php-agent prengineer/jenkins-php-agent:8.1-x64
  ```

  This will start the container and execute the linux shell, waiting for a command to execute.

  This image can be used as a base image to test your PHP projects.

  Just add your application code, PHPUnit test cases, autoloader.php, composer.json, and phpunit.xml files.  Run your tests: "phpunit tests --testdox"
  (assuming that the tests are in a folder named 'tests').